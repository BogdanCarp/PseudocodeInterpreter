//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Sergiu/RiderProjects/PseudocodeInterpreter/PseudocodeInterpreter/src/AntlrFiles\Pseudo.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class PseudoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, INT_TYPE=13, FLOAT_TYPE=14, STRING_TYPE=15, 
		CHAR_TYPE=16, BOOL_TYPE=17, READ_BUILTIN=18, WRITE_BUILTIN=19, WRITELN_BUILTIN=20, 
		IF=21, THEN=22, ELSE=23, WHILE=24, EXEC=25, REPEAT=26, UNTIL=27, END=28, 
		AND=29, OR=30, NOT=31, FUNCTION=32, LP=33, RP=34, ASSIGN=35, EQUAL=36, 
		INT=37, FLOAT=38, STRING=39, ID=40, NL=41, LINE_COMMENT=42, COMMENT=43, 
		WS=44;
	public const int
		RULE_file = 0, RULE_statList = 1, RULE_stat = 2, RULE_ifStat = 3, RULE_elseIfStat = 4, 
		RULE_elseStat = 5, RULE_whileStat = 6, RULE_readBuiltin = 7, RULE_writeBuiltin = 8, 
		RULE_varDecl = 9, RULE_optionalAssign = 10, RULE_varAssign = 11, RULE_type = 12, 
		RULE_boolOp = 13, RULE_expr = 14, RULE_plusOrMinus = 15, RULE_multOrDiv = 16, 
		RULE_unarySign = 17, RULE_atom = 18;
	public static readonly string[] ruleNames = {
		"file", "statList", "stat", "ifStat", "elseIfStat", "elseStat", "whileStat", 
		"readBuiltin", "writeBuiltin", "varDecl", "optionalAssign", "varAssign", 
		"type", "boolOp", "expr", "plusOrMinus", "multOrDiv", "unarySign", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'<'", "'<='", "'>'", "'>='", "'['", "']'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'intreg'", "'real'", "'text'", "'caracter'", "'boolean'", 
		"'citeste'", "'scrie'", "'scrieln'", "'daca'", "'atunci'", "'altfel'", 
		"'cat timp'", "'executa'", "'repeta'", "'pana cand'", "'sfarsit'", "'si'", 
		"'sau'", "'non'", "'fun'", "'('", "')'", "'<-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", "CHAR_TYPE", "BOOL_TYPE", 
		"READ_BUILTIN", "WRITE_BUILTIN", "WRITELN_BUILTIN", "IF", "THEN", "ELSE", 
		"WHILE", "EXEC", "REPEAT", "UNTIL", "END", "AND", "OR", "NOT", "FUNCTION", 
		"LP", "RP", "ASSIGN", "EQUAL", "INT", "FLOAT", "STRING", "ID", "NL", "LINE_COMMENT", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pseudo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PseudoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; statList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatListContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatListContext statList() {
		StatListContext _localctx = new StatListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; stat();
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 41; Match(NL);
					State = 42; stat();
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public ReadBuiltinContext readBuiltin() {
			return GetRuleContext<ReadBuiltinContext>(0);
		}
		public WriteBuiltinContext writeBuiltin() {
			return GetRuleContext<WriteBuiltinContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
			case FLOAT_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; varDecl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; varAssign();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; ifStat();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; whileStat();
				}
				break;
			case READ_BUILTIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52; readBuiltin();
				}
				break;
			case WRITE_BUILTIN:
			case WRITELN_BUILTIN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53; writeBuiltin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(PseudoParser.IF, 0); }
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PseudoParser.THEN, 0); }
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public ITerminalNode END() { return GetToken(PseudoParser.END, 0); }
		public ElseIfStatContext[] elseIfStat() {
			return GetRuleContexts<ElseIfStatContext>();
		}
		public ElseIfStatContext elseIfStat(int i) {
			return GetRuleContext<ElseIfStatContext>(i);
		}
		public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStat);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(IF);
			State = 57; boolOp(0);
			State = 58; Match(THEN);
			State = 59; Match(NL);
			State = 60; statList();
			State = 61; Match(NL);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 62; elseIfStat();
					}
					} 
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 68; elseStat();
				}
			}

			State = 71; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PseudoParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(PseudoParser.IF, 0); }
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PseudoParser.THEN, 0); }
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public ElseIfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatContext elseIfStat() {
		ElseIfStatContext _localctx = new ElseIfStatContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(ELSE);
			State = 74; Match(IF);
			State = 75; boolOp(0);
			State = 76; Match(THEN);
			State = 77; Match(NL);
			State = 78; statList();
			State = 79; Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PseudoParser.ELSE, 0); }
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 10, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(ELSE);
			State = 82; Match(NL);
			State = 83; statList();
			State = 84; Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(PseudoParser.WHILE, 0); }
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public ITerminalNode EXEC() { return GetToken(PseudoParser.EXEC, 0); }
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public ITerminalNode END() { return GetToken(PseudoParser.END, 0); }
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(WHILE);
			State = 87; boolOp(0);
			State = 88; Match(EXEC);
			State = 89; Match(NL);
			State = 90; statList();
			State = 91; Match(NL);
			State = 92; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadBuiltinContext : ParserRuleContext {
		public ITerminalNode READ_BUILTIN() { return GetToken(PseudoParser.READ_BUILTIN, 0); }
		public ITerminalNode[] ID() { return GetTokens(PseudoParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PseudoParser.ID, i);
		}
		public ReadBuiltinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readBuiltin; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadBuiltin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadBuiltinContext readBuiltin() {
		ReadBuiltinContext _localctx = new ReadBuiltinContext(Context, State);
		EnterRule(_localctx, 14, RULE_readBuiltin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(READ_BUILTIN);
			State = 95; Match(ID);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 96; Match(T__0);
				State = 97; Match(ID);
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteBuiltinContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode WRITE_BUILTIN() { return GetToken(PseudoParser.WRITE_BUILTIN, 0); }
		public ITerminalNode WRITELN_BUILTIN() { return GetToken(PseudoParser.WRITELN_BUILTIN, 0); }
		public WriteBuiltinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeBuiltin; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteBuiltin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteBuiltinContext writeBuiltin() {
		WriteBuiltinContext _localctx = new WriteBuiltinContext(Context, State);
		EnterRule(_localctx, 16, RULE_writeBuiltin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !(_la==WRITE_BUILTIN || _la==WRITELN_BUILTIN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 104; expr();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 105; Match(T__0);
				State = 106; expr();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OptionalAssignContext[] optionalAssign() {
			return GetRuleContexts<OptionalAssignContext>();
		}
		public OptionalAssignContext optionalAssign(int i) {
			return GetRuleContext<OptionalAssignContext>(i);
		}
		public VariableDeclarationContext(VarDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_varDecl);
		int _la;
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; type();
			State = 113; optionalAssign();
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 114; Match(T__0);
				State = 115; optionalAssign();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalAssignContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OptionalAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalAssignContext optionalAssign() {
		OptionalAssignContext _localctx = new OptionalAssignContext(Context, State);
		EnterRule(_localctx, 20, RULE_optionalAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(ID);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 122; Match(ASSIGN);
				State = 123; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
	 
		public VarAssignContext() { }
		public virtual void CopyFrom(VarAssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : VarAssignContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignmentContext(VarAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(Context, State);
		EnterRule(_localctx, 22, RULE_varAssign);
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(ID);
			State = 127; Match(ASSIGN);
			State = 128; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(PseudoParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(PseudoParser.FLOAT_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(PseudoParser.STRING_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_TYPE) | (1L << FLOAT_TYPE) | (1L << STRING_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
	 
		public BoolOpContext() { }
		public virtual void CopyFrom(BoolOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqualContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public LessOrEqualContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrOpContext : BoolOpContext {
		public BoolOpContext[] boolOp() {
			return GetRuleContexts<BoolOpContext>();
		}
		public BoolOpContext boolOp(int i) {
			return GetRuleContext<BoolOpContext>(i);
		}
		public ITerminalNode OR() { return GetToken(PseudoParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PseudoParser.NOT, 0); }
		public OrOpContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public LessThanContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public GreaterThanContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqualContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public GreaterOrEqualContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreEqualContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(PseudoParser.EQUAL, 0); }
		public AreEqualContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOpContext : BoolOpContext {
		public BoolOpContext[] boolOp() {
			return GetRuleContexts<BoolOpContext>();
		}
		public BoolOpContext boolOp(int i) {
			return GetRuleContext<BoolOpContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PseudoParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(PseudoParser.NOT, 0); }
		public AndOpContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		return boolOp(0);
	}

	private BoolOpContext boolOp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolOpContext _localctx = new BoolOpContext(Context, _parentState);
		BoolOpContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_boolOp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new AreEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 133; plusOrMinus(0);
				State = 134; Match(EQUAL);
				State = 135; plusOrMinus(0);
				}
				break;
			case 2:
				{
				_localctx = new LessThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; plusOrMinus(0);
				State = 138; Match(T__1);
				State = 139; plusOrMinus(0);
				}
				break;
			case 3:
				{
				_localctx = new LessOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 141; plusOrMinus(0);
				State = 142; Match(T__2);
				State = 143; plusOrMinus(0);
				}
				break;
			case 4:
				{
				_localctx = new GreaterThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145; plusOrMinus(0);
				State = 146; Match(T__3);
				State = 147; plusOrMinus(0);
				}
				break;
			case 5:
				{
				_localctx = new GreaterOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149; plusOrMinus(0);
				State = 150; Match(T__4);
				State = 151; plusOrMinus(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 167;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new AndOpContext(new BoolOpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolOp);
						State = 155;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 157;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 156; Match(NOT);
							}
						}

						State = 159; Match(AND);
						State = 160; boolOp(8);
						}
						break;
					case 2:
						{
						_localctx = new OrOpContext(new BoolOpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolOp);
						State = 161;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 163;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 162; Match(NOT);
							}
						}

						State = 165; Match(OR);
						State = 166; boolOp(7);
						}
						break;
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToPlusOrMinusContext : ExprContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ToPlusOrMinusContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WholePartContext : ExprContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public WholePartContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWholePart(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(PseudoParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__8:
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToPlusOrMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; plusOrMinus(0);
				}
				break;
			case T__5:
				_localctx = new WholePartContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; Match(T__5);
				State = 174; plusOrMinus(0);
				State = 175; Match(T__6);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOrMinusContext : ParserRuleContext {
		public PlusOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOrMinus; } }
	 
		public PlusOrMinusContext() { }
		public virtual void CopyFrom(PlusOrMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public AddContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToMultOrDivContext : PlusOrMinusContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ToMultOrDivContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToMultOrDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public SubContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOrMinusContext plusOrMinus() {
		return plusOrMinus(0);
	}

	private PlusOrMinusContext plusOrMinus(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlusOrMinusContext _localctx = new PlusOrMinusContext(Context, _parentState);
		PlusOrMinusContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_plusOrMinus, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToMultOrDivContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 181; multOrDiv(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 189;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new AddContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 183;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 184; Match(T__7);
						State = 185; multOrDiv(0);
						}
						break;
					case 2:
						{
						_localctx = new SubContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 186;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 187; Match(T__8);
						State = 188; multOrDiv(0);
						}
						break;
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOrDivContext : ParserRuleContext {
		public MultOrDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOrDiv; } }
	 
		public MultOrDivContext() { }
		public virtual void CopyFrom(MultOrDivContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public DivContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToUnarySignContext : MultOrDivContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public ToUnarySignContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToUnarySign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public MultContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public ModuloContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOrDivContext multOrDiv() {
		return multOrDiv(0);
	}

	private MultOrDivContext multOrDiv(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultOrDivContext _localctx = new MultOrDivContext(Context, _parentState);
		MultOrDivContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_multOrDiv, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToUnarySignContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 195; unarySign();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 206;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new MultContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 197;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 198; Match(T__9);
						State = 199; unarySign();
						}
						break;
					case 2:
						{
						_localctx = new DivContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 200;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 201; Match(T__10);
						State = 202; unarySign();
						}
						break;
					case 3:
						{
						_localctx = new ModuloContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 203;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 204; Match(T__11);
						State = 205; unarySign();
						}
						break;
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnarySignContext : ParserRuleContext {
		public UnarySignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unarySign; } }
	 
		public UnarySignContext() { }
		public virtual void CopyFrom(UnarySignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryPlusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryPlusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryMinusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToAtomContext : UnarySignContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnarySignContext unarySign() {
		UnarySignContext _localctx = new UnarySignContext(Context, State);
		EnterRule(_localctx, 34, RULE_unarySign);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				_localctx = new UnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; Match(T__7);
				State = 212; unarySign();
				}
				break;
			case T__8:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; Match(T__8);
				State = 214; unarySign();
				}
				break;
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : AtomContext {
		public ITerminalNode INT() { return GetToken(PseudoParser.INT, 0); }
		public IntegerContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatingPointContext : AtomContext {
		public ITerminalNode FLOAT() { return GetToken(PseudoParser.FLOAT, 0); }
		public FloatingPointContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPoint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToParenPlusOrMinusContext : AtomContext {
		public ITerminalNode LP() { return GetToken(PseudoParser.LP, 0); }
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode RP() { return GetToken(PseudoParser.RP, 0); }
		public ToParenPlusOrMinusContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToParenPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetVariableContext : AtomContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public GetVariableContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 36, RULE_atom);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; Match(FLOAT);
				}
				break;
			case ID:
				_localctx = new GetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; Match(ID);
				}
				break;
			case LP:
				_localctx = new ToParenPlusOrMinusContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 221; Match(LP);
				State = 222; plusOrMinus(0);
				State = 223; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return boolOp_sempred((BoolOpContext)_localctx, predIndex);
		case 15: return plusOrMinus_sempred((PlusOrMinusContext)_localctx, predIndex);
		case 16: return multOrDiv_sempred((MultOrDivContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolOp_sempred(BoolOpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool plusOrMinus_sempred(PlusOrMinusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multOrDiv_sempred(MultOrDivContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\xE6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '.', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x31', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x39', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x42', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'H', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x65', '\n', '\t', '\f', 
		'\t', '\xE', '\t', 'h', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'n', '\n', '\n', '\f', '\n', '\xE', '\n', 'q', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', 'w', '\n', '\v', '\f', '\v', '\xE', '\v', 'z', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x7F', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x9C', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xA0', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA6', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\xAA', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xAD', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB5', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xC0', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC3', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xD1', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\xD4', '\v', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xDB', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xE4', '\n', 
		'\x14', '\x3', '\x14', '\x2', '\x5', '\x1C', ' ', '\"', '\x15', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\x4', '\x3', 
		'\x2', '\x15', '\x16', '\x3', '\x2', '\xF', '\x11', '\x2', '\xF2', '\x2', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x38', '\x3', '\x2', '\x2', '\x2', '\b', ':', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'K', '\x3', '\x2', '\x2', '\x2', '\f', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'X', '\x3', '\x2', '\x2', '\x2', '\x10', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'i', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x16', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x80', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xB6', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '$', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xE3', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x5', '\x4', 
		'\x3', '\x2', ')', '\x3', '\x3', '\x2', '\x2', '\x2', '*', '/', '\x5', 
		'\x6', '\x4', '\x2', '+', ',', '\a', '+', '\x2', '\x2', ',', '.', '\x5', 
		'\x6', '\x4', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x39', '\x5', 
		'\x14', '\v', '\x2', '\x33', '\x39', '\x5', '\x18', '\r', '\x2', '\x34', 
		'\x39', '\x5', '\b', '\x5', '\x2', '\x35', '\x39', '\x5', '\xE', '\b', 
		'\x2', '\x36', '\x39', '\x5', '\x10', '\t', '\x2', '\x37', '\x39', '\x5', 
		'\x12', '\n', '\x2', '\x38', '\x32', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\a', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x17', '\x2', '\x2', 
		';', '<', '\x5', '\x1C', '\xF', '\x2', '<', '=', '\a', '\x18', '\x2', 
		'\x2', '=', '>', '\a', '+', '\x2', '\x2', '>', '?', '\x5', '\x4', '\x3', 
		'\x2', '?', '\x43', '\a', '+', '\x2', '\x2', '@', '\x42', '\x5', '\n', 
		'\x6', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', 
		'\x5', '\f', '\a', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 
		'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\x1E', '\x2', '\x2', 'J', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\a', '\x19', '\x2', '\x2', 'L', 'M', '\a', '\x17', '\x2', 
		'\x2', 'M', 'N', '\x5', '\x1C', '\xF', '\x2', 'N', 'O', '\a', '\x18', 
		'\x2', '\x2', 'O', 'P', '\a', '+', '\x2', '\x2', 'P', 'Q', '\x5', '\x4', 
		'\x3', '\x2', 'Q', 'R', '\a', '+', '\x2', '\x2', 'R', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\x19', '\x2', '\x2', 'T', 'U', '\a', '+', 
		'\x2', '\x2', 'U', 'V', '\x5', '\x4', '\x3', '\x2', 'V', 'W', '\a', '+', 
		'\x2', '\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x1A', 
		'\x2', '\x2', 'Y', 'Z', '\x5', '\x1C', '\xF', '\x2', 'Z', '[', '\a', '\x1B', 
		'\x2', '\x2', '[', '\\', '\a', '+', '\x2', '\x2', '\\', ']', '\x5', '\x4', 
		'\x3', '\x2', ']', '^', '\a', '+', '\x2', '\x2', '^', '_', '\a', '\x1E', 
		'\x2', '\x2', '_', '\xF', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'\x14', '\x2', '\x2', '\x61', '\x66', '\a', '*', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\x3', '\x2', '\x2', '\x63', '\x65', '\a', '*', '\x2', '\x2', 
		'\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x11', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\t', '\x2', '\x2', '\x2', 
		'j', 'o', '\x5', '\x1E', '\x10', '\x2', 'k', 'l', '\a', '\x3', '\x2', 
		'\x2', 'l', 'n', '\x5', '\x1E', '\x10', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', 
		'\x1A', '\xE', '\x2', 's', 'x', '\x5', '\x16', '\f', '\x2', 't', 'u', 
		'\a', '\x3', '\x2', '\x2', 'u', 'w', '\x5', '\x16', '\f', '\x2', 'v', 
		't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', '\x15', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', '{', '~', '\a', '*', '\x2', '\x2', '|', '}', '\a', '%', '\x2', 
		'\x2', '}', '\x7F', '\x5', '\x1E', '\x10', '\x2', '~', '|', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '*', '\x2', '\x2', '\x81', 
		'\x82', '\a', '%', '\x2', '\x2', '\x82', '\x83', '\x5', '\x1E', '\x10', 
		'\x2', '\x83', '\x19', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\t', 
		'\x3', '\x2', '\x2', '\x85', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\b', '\xF', '\x1', '\x2', '\x87', '\x88', '\x5', ' ', '\x11', 
		'\x2', '\x88', '\x89', '\a', '&', '\x2', '\x2', '\x89', '\x8A', '\x5', 
		' ', '\x11', '\x2', '\x8A', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\x5', ' ', '\x11', '\x2', '\x8C', '\x8D', '\a', '\x4', '\x2', 
		'\x2', '\x8D', '\x8E', '\x5', ' ', '\x11', '\x2', '\x8E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', ' ', '\x11', '\x2', '\x90', 
		'\x91', '\a', '\x5', '\x2', '\x2', '\x91', '\x92', '\x5', ' ', '\x11', 
		'\x2', '\x92', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x5', 
		' ', '\x11', '\x2', '\x94', '\x95', '\a', '\x6', '\x2', '\x2', '\x95', 
		'\x96', '\x5', ' ', '\x11', '\x2', '\x96', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x5', ' ', '\x11', '\x2', '\x98', '\x99', '\a', 
		'\a', '\x2', '\x2', '\x99', '\x9A', '\x5', ' ', '\x11', '\x2', '\x9A', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9F', '\f', '\t', '\x2', '\x2', '\x9E', '\xA0', '\a', 
		'!', '\x2', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x1F', '\x2', '\x2', '\xA2', '\xAA', '\x5', 
		'\x1C', '\xF', '\n', '\xA3', '\xA5', '\f', '\b', '\x2', '\x2', '\xA4', 
		'\xA6', '\a', '!', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', ' ', '\x2', '\x2', '\xA8', 
		'\xAA', '\x5', '\x1C', '\xF', '\t', '\xA9', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB5', '\x5', 
		' ', '\x11', '\x2', '\xAF', '\xB0', '\a', '\b', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', ' ', '\x11', '\x2', '\xB1', '\xB2', '\a', '\t', '\x2', 
		'\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\a', 
		')', '\x2', '\x2', '\xB4', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\b', 
		'\x11', '\x1', '\x2', '\xB7', '\xB8', '\x5', '\"', '\x12', '\x2', '\xB8', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\f', '\x5', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\n', '\x2', '\x2', '\xBB', '\xC0', '\x5', 
		'\"', '\x12', '\x2', '\xBC', '\xBD', '\f', '\x4', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\v', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\"', '\x12', 
		'\x2', '\xBF', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '!', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\b', '\x12', '\x1', '\x2', '\xC5', 
		'\xC6', '\x5', '$', '\x13', '\x2', '\xC6', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\f', '\x6', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'\f', '\x2', '\x2', '\xC9', '\xD1', '\x5', '$', '\x13', '\x2', '\xCA', 
		'\xCB', '\f', '\x5', '\x2', '\x2', '\xCB', '\xCC', '\a', '\r', '\x2', 
		'\x2', '\xCC', '\xD1', '\x5', '$', '\x13', '\x2', '\xCD', '\xCE', '\f', 
		'\x4', '\x2', '\x2', '\xCE', '\xCF', '\a', '\xE', '\x2', '\x2', '\xCF', 
		'\xD1', '\x5', '$', '\x13', '\x2', '\xD0', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '#', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\n', '\x2', '\x2', '\xD6', 
		'\xDB', '\x5', '$', '\x13', '\x2', '\xD7', '\xD8', '\a', '\v', '\x2', 
		'\x2', '\xD8', '\xDB', '\x5', '$', '\x13', '\x2', '\xD9', '\xDB', '\x5', 
		'&', '\x14', '\x2', '\xDA', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '%', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE4', '\a', 
		'\'', '\x2', '\x2', '\xDD', '\xE4', '\a', '(', '\x2', '\x2', '\xDE', '\xE4', 
		'\a', '*', '\x2', '\x2', '\xDF', '\xE0', '\a', '#', '\x2', '\x2', '\xE0', 
		'\xE1', '\x5', ' ', '\x11', '\x2', '\xE1', '\xE2', '\a', '$', '\x2', '\x2', 
		'\xE2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\'', '\x3', '\x2', '\x2', '\x2', '\x16', '/', '\x38', '\x43', 
		'G', '\x66', 'o', 'x', '~', '\x9B', '\x9F', '\xA5', '\xA9', '\xAB', '\xB4', 
		'\xBF', '\xC1', '\xD0', '\xD2', '\xDA', '\xE3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGenerated
