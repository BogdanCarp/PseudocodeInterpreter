//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Sergiu/RiderProjects/PseudocodeInterpreter/PseudocodeInterpreter/src/antlr-files\Pseudo.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class PseudoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INT_TYPE=6, FLOAT_TYPE=7, STRING_TYPE=8, 
		CHAR_TYPE=9, BOOL_TYPE=10, READ_BUILTIN=11, WRITE_BUILTIN=12, IF=13, THEN=14, 
		ELSE=15, WHILE=16, EXEC=17, REPEAT=18, UNTIL=19, END=20, FUNCTION=21, 
		LP=22, RP=23, ASSIGN=24, EQUAL=25, INT=26, FLOAT=27, STRING=28, ID=29, 
		NL=30, LINE_COMMENT=31, COMMENT=32, WS=33;
	public const int
		RULE_file = 0, RULE_stat = 1, RULE_varDecl = 2, RULE_varAssign = 3, RULE_type = 4, 
		RULE_expr = 5, RULE_unarySign = 6, RULE_atom = 7;
	public static readonly string[] ruleNames = {
		"file", "stat", "varDecl", "varAssign", "type", "expr", "unarySign", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'*'", "'/'", "'+'", "'-'", "'intreg'", "'real'", "'sir'", 
		"'caracter'", "'boolean'", "'citeste'", "'scrie'", "'daca'", "'atunci'", 
		"'altfel'", "'cat timp'", "'executa'", "'repeta'", "'pana cand'", "'sfarsit'", 
		"'fun'", "'('", "')'", "'<-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", 
		"CHAR_TYPE", "BOOL_TYPE", "READ_BUILTIN", "WRITE_BUILTIN", "IF", "THEN", 
		"ELSE", "WHILE", "EXEC", "REPEAT", "UNTIL", "END", "FUNCTION", "LP", "RP", 
		"ASSIGN", "EQUAL", "INT", "FLOAT", "STRING", "ID", "NL", "LINE_COMMENT", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pseudo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PseudoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; stat();
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 17; Match(NL);
				State = 18; stat();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WriteBuiltinStatContext : StatContext {
		public ITerminalNode WRITE_BUILTIN() { return GetToken(PseudoParser.WRITE_BUILTIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteBuiltinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteBuiltinStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToVarDeclContext : StatContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ToVarDeclContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadBuiltinStatContext : StatContext {
		public ITerminalNode READ_BUILTIN() { return GetToken(PseudoParser.READ_BUILTIN, 0); }
		public ITerminalNode[] ID() { return GetTokens(PseudoParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PseudoParser.ID, i);
		}
		public ITerminalNode NL() { return GetToken(PseudoParser.NL, 0); }
		public ReadBuiltinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadBuiltinStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		int _la;
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
			case FLOAT_TYPE:
				_localctx = new ToVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; varDecl();
				}
				break;
			case READ_BUILTIN:
				_localctx = new ReadBuiltinStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; Match(READ_BUILTIN);
				State = 26; Match(ID);
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 27; Match(T__0);
					State = 28; Match(ID);
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 34; Match(NL);
				}
				break;
			case WRITE_BUILTIN:
				_localctx = new WriteBuiltinStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; Match(WRITE_BUILTIN);
				State = 36; expr();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 37; Match(T__0);
					State = 38; expr();
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(VarDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; type();
			State = 47; Match(ID);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 48; Match(ASSIGN);
				State = 49; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
	 
		public VarAssignContext() { }
		public virtual void CopyFrom(VarAssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : VarAssignContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignmentContext(VarAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAssign);
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(ID);
			State = 53; Match(ASSIGN);
			State = 54; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(PseudoParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(PseudoParser.FLOAT_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.LA(1);
			if ( !(_la==INT_TYPE || _la==FLOAT_TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivContext : ExprContext {
		public UnarySignContext[] unarySign() {
			return GetRuleContexts<UnarySignContext>();
		}
		public UnarySignContext unarySign(int i) {
			return GetRuleContext<UnarySignContext>(i);
		}
		public DivContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddContext : ExprContext {
		public UnarySignContext[] unarySign() {
			return GetRuleContexts<UnarySignContext>();
		}
		public UnarySignContext unarySign(int i) {
			return GetRuleContext<UnarySignContext>(i);
		}
		public AddContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : ExprContext {
		public UnarySignContext[] unarySign() {
			return GetRuleContexts<UnarySignContext>();
		}
		public UnarySignContext unarySign(int i) {
			return GetRuleContext<UnarySignContext>(i);
		}
		public SubContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToUnarySignContext : ExprContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public ToUnarySignContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToUnarySign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultContext : ExprContext {
		public UnarySignContext[] unarySign() {
			return GetRuleContexts<UnarySignContext>();
		}
		public UnarySignContext unarySign(int i) {
			return GetRuleContext<UnarySignContext>(i);
		}
		public MultContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_expr);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new MultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; unarySign();
				State = 59; Match(T__1);
				State = 60; unarySign();
				}
				break;
			case 2:
				_localctx = new DivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; unarySign();
				State = 63; Match(T__2);
				State = 64; unarySign();
				}
				break;
			case 3:
				_localctx = new AddContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66; unarySign();
				State = 67; Match(T__3);
				State = 68; unarySign();
				}
				break;
			case 4:
				_localctx = new SubContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; unarySign();
				State = 71; Match(T__4);
				State = 72; unarySign();
				}
				break;
			case 5:
				_localctx = new ToUnarySignContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 74; unarySign();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnarySignContext : ParserRuleContext {
		public UnarySignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unarySign; } }
	 
		public UnarySignContext() { }
		public virtual void CopyFrom(UnarySignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryPlusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryPlusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryMinusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToAtomContext : UnarySignContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnarySignContext unarySign() {
		UnarySignContext _localctx = new UnarySignContext(Context, State);
		EnterRule(_localctx, 12, RULE_unarySign);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				_localctx = new UnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(T__3);
				State = 78; unarySign();
				}
				break;
			case T__4:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; Match(T__4);
				State = 80; unarySign();
				}
				break;
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : AtomContext {
		public ITerminalNode INT() { return GetToken(PseudoParser.INT, 0); }
		public IntegerContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToParenExprContext : AtomContext {
		public ITerminalNode LP() { return GetToken(PseudoParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(PseudoParser.RP, 0); }
		public ToParenExprContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatingPointContext : AtomContext {
		public ITerminalNode FLOAT() { return GetToken(PseudoParser.FLOAT, 0); }
		public FloatingPointContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPoint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetVariableContext : AtomContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public GetVariableContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; Match(FLOAT);
				}
				break;
			case ID:
				_localctx = new GetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86; Match(ID);
				}
				break;
			case LP:
				_localctx = new ToParenExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 87; Match(LP);
				State = 88; expr();
				State = 89; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '`', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		' ', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '#', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'*', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '-', '\v', '\x3', '\x5', 
		'\x3', '/', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'N', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'U', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '^', 
		'\n', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x2', '\x3', '\x3', '\x2', '\b', '\t', '\x2', 
		'\x66', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x30', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'M', '\x3', '\x2', '\x2', '\x2', '\xE', 'T', '\x3', '\x2', '\x2', 
		'\x2', '\x10', ']', '\x3', '\x2', '\x2', '\x2', '\x12', '\x17', '\x5', 
		'\x4', '\x3', '\x2', '\x13', '\x14', '\a', ' ', '\x2', '\x2', '\x14', 
		'\x16', '\x5', '\x4', '\x3', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '/', '\x5', '\x6', '\x4', '\x2', '\x1B', '\x1C', '\a', 
		'\r', '\x2', '\x2', '\x1C', '!', '\a', '\x1F', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\x3', '\x2', '\x2', '\x1E', ' ', '\a', '\x1F', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '/', '\a', ' ', '\x2', '\x2', '%', '&', '\a', '\xE', 
		'\x2', '\x2', '&', '+', '\x5', '\f', '\a', '\x2', '\'', '(', '\a', '\x3', 
		'\x2', '\x2', '(', '*', '\x5', '\f', '\a', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x1B', '\x3', '\x2', '\x2', '\x2', '.', '%', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x5', '\n', '\x6', '\x2', '\x31', '\x34', '\a', '\x1F', '\x2', 
		'\x2', '\x32', '\x33', '\a', '\x1A', '\x2', '\x2', '\x33', '\x35', '\x5', 
		'\f', '\a', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\x1F', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x1A', '\x2', '\x2', '\x38', '\x39', '\x5', '\f', '\a', '\x2', '\x39', 
		'\t', '\x3', '\x2', '\x2', '\x2', ':', ';', '\t', '\x2', '\x2', '\x2', 
		';', '\v', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', '\xE', '\b', '\x2', 
		'=', '>', '\a', '\x4', '\x2', '\x2', '>', '?', '\x5', '\xE', '\b', '\x2', 
		'?', 'N', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\xE', '\b', 
		'\x2', '\x41', '\x42', '\a', '\x5', '\x2', '\x2', '\x42', '\x43', '\x5', 
		'\xE', '\b', '\x2', '\x43', 'N', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x5', '\xE', '\b', '\x2', '\x45', '\x46', '\a', '\x6', '\x2', '\x2', 
		'\x46', 'G', '\x5', '\xE', '\b', '\x2', 'G', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\x5', '\xE', '\b', '\x2', 'I', 'J', '\a', '\a', '\x2', 
		'\x2', 'J', 'K', '\x5', '\xE', '\b', '\x2', 'K', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'N', '\x5', '\xE', '\b', '\x2', 'M', '<', '\x3', '\x2', '\x2', 
		'\x2', 'M', '@', '\x3', '\x2', '\x2', '\x2', 'M', '\x44', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'H', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\r', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x6', 
		'\x2', '\x2', 'P', 'U', '\x5', '\xE', '\b', '\x2', 'Q', 'R', '\a', '\a', 
		'\x2', '\x2', 'R', 'U', '\x5', '\xE', '\b', '\x2', 'S', 'U', '\x5', '\x10', 
		'\t', '\x2', 'T', 'O', '\x3', '\x2', '\x2', '\x2', 'T', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'V', '^', '\a', '\x1C', '\x2', '\x2', 'W', '^', '\a', 
		'\x1D', '\x2', '\x2', 'X', '^', '\a', '\x1F', '\x2', '\x2', 'Y', 'Z', 
		'\a', '\x18', '\x2', '\x2', 'Z', '[', '\x5', '\f', '\a', '\x2', '[', '\\', 
		'\a', '\x19', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', 
		'V', '\x3', '\x2', '\x2', '\x2', ']', 'W', '\x3', '\x2', '\x2', '\x2', 
		']', 'X', '\x3', '\x2', '\x2', '\x2', ']', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x11', '\x3', '\x2', '\x2', '\x2', '\n', '\x17', '!', '+', '.', 
		'\x34', 'M', 'T', ']',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGenerated
