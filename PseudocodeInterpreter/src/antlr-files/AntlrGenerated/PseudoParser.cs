//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Sergiu/RiderProjects/PseudocodeInterpreter/PseudocodeInterpreter/src/antlr-files\Pseudo.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class PseudoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INT_TYPE=6, FLOAT_TYPE=7, STRING_TYPE=8, 
		CHAR_TYPE=9, BOOL_TYPE=10, READ_BUILTIN=11, WRITE_BUILTIN=12, IF=13, THEN=14, 
		ELSE=15, WHILE=16, EXEC=17, REPEAT=18, UNTIL=19, END=20, FUNCTION=21, 
		LP=22, RP=23, ASSIGN=24, EQUAL=25, INT=26, FLOAT=27, STRING=28, ID=29, 
		NL=30, LINE_COMMENT=31, COMMENT=32, WS=33;
	public const int
		RULE_file = 0, RULE_stat = 1, RULE_varDecl = 2, RULE_varAssign = 3, RULE_type = 4, 
		RULE_expr = 5, RULE_plusOrMinus = 6, RULE_multOrDiv = 7, RULE_unarySign = 8, 
		RULE_atom = 9;
	public static readonly string[] ruleNames = {
		"file", "stat", "varDecl", "varAssign", "type", "expr", "plusOrMinus", 
		"multOrDiv", "unarySign", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'+'", "'-'", "'*'", "'/'", "'intreg'", "'real'", "'text'", 
		"'caracter'", "'boolean'", "'citeste'", "'scrie'", "'daca'", "'atunci'", 
		"'altfel'", "'cat timp'", "'executa'", "'repeta'", "'pana cand'", "'sfarsit'", 
		"'fun'", "'('", "')'", "'<-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", 
		"CHAR_TYPE", "BOOL_TYPE", "READ_BUILTIN", "WRITE_BUILTIN", "IF", "THEN", 
		"ELSE", "WHILE", "EXEC", "REPEAT", "UNTIL", "END", "FUNCTION", "LP", "RP", 
		"ASSIGN", "EQUAL", "INT", "FLOAT", "STRING", "ID", "NL", "LINE_COMMENT", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pseudo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PseudoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; stat();
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 21; Match(NL);
				State = 22; stat();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WriteBuiltinStatContext : StatContext {
		public ITerminalNode WRITE_BUILTIN() { return GetToken(PseudoParser.WRITE_BUILTIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteBuiltinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteBuiltinStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToVarDeclContext : StatContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ToVarDeclContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadBuiltinStatContext : StatContext {
		public ITerminalNode READ_BUILTIN() { return GetToken(PseudoParser.READ_BUILTIN, 0); }
		public ITerminalNode[] ID() { return GetTokens(PseudoParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PseudoParser.ID, i);
		}
		public ITerminalNode NL() { return GetToken(PseudoParser.NL, 0); }
		public ReadBuiltinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadBuiltinStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		int _la;
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
			case FLOAT_TYPE:
			case STRING_TYPE:
				_localctx = new ToVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; varDecl();
				}
				break;
			case READ_BUILTIN:
				_localctx = new ReadBuiltinStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; Match(READ_BUILTIN);
				State = 30; Match(ID);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 31; Match(T__0);
					State = 32; Match(ID);
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 38; Match(NL);
				}
				break;
			case WRITE_BUILTIN:
				_localctx = new WriteBuiltinStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 39; Match(WRITE_BUILTIN);
				State = 40; expr();
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 41; Match(T__0);
					State = 42; expr();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(VarDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; type();
			State = 51; Match(ID);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 52; Match(ASSIGN);
				State = 53; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
	 
		public VarAssignContext() { }
		public virtual void CopyFrom(VarAssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : VarAssignContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignmentContext(VarAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(Context, State);
		EnterRule(_localctx, 6, RULE_varAssign);
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(ID);
			State = 57; Match(ASSIGN);
			State = 58; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(PseudoParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(PseudoParser.FLOAT_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(PseudoParser.STRING_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_TYPE) | (1L << FLOAT_TYPE) | (1L << STRING_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToPlusOrMinusContext : ExprContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ToPlusOrMinusContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(PseudoParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_expr);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToPlusOrMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; plusOrMinus(0);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOrMinusContext : ParserRuleContext {
		public PlusOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOrMinus; } }
	 
		public PlusOrMinusContext() { }
		public virtual void CopyFrom(PlusOrMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public AddContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToMultOrDivContext : PlusOrMinusContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ToMultOrDivContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToMultOrDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public SubContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOrMinusContext plusOrMinus() {
		return plusOrMinus(0);
	}

	private PlusOrMinusContext plusOrMinus(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlusOrMinusContext _localctx = new PlusOrMinusContext(Context, _parentState);
		PlusOrMinusContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_plusOrMinus, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToMultOrDivContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 67; multOrDiv(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 75;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new AddContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 69;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 70; Match(T__1);
						State = 71; multOrDiv(0);
						}
						break;
					case 2:
						{
						_localctx = new SubContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 72;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 73; Match(T__2);
						State = 74; multOrDiv(0);
						}
						break;
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOrDivContext : ParserRuleContext {
		public MultOrDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOrDiv; } }
	 
		public MultOrDivContext() { }
		public virtual void CopyFrom(MultOrDivContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public DivContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToUnarySignContext : MultOrDivContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public ToUnarySignContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToUnarySign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public MultContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOrDivContext multOrDiv() {
		return multOrDiv(0);
	}

	private MultOrDivContext multOrDiv(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultOrDivContext _localctx = new MultOrDivContext(Context, _parentState);
		MultOrDivContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_multOrDiv, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToUnarySignContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 81; unarySign();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new MultContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 83;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 84; Match(T__3);
						State = 85; unarySign();
						}
						break;
					case 2:
						{
						_localctx = new DivContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 86;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 87; Match(T__4);
						State = 88; unarySign();
						}
						break;
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnarySignContext : ParserRuleContext {
		public UnarySignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unarySign; } }
	 
		public UnarySignContext() { }
		public virtual void CopyFrom(UnarySignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryPlusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryPlusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryMinusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToAtomContext : UnarySignContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnarySignContext unarySign() {
		UnarySignContext _localctx = new UnarySignContext(Context, State);
		EnterRule(_localctx, 16, RULE_unarySign);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				_localctx = new UnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; Match(T__1);
				State = 95; unarySign();
				}
				break;
			case T__2:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; Match(T__2);
				State = 97; unarySign();
				}
				break;
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 98; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : AtomContext {
		public ITerminalNode INT() { return GetToken(PseudoParser.INT, 0); }
		public IntegerContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatingPointContext : AtomContext {
		public ITerminalNode FLOAT() { return GetToken(PseudoParser.FLOAT, 0); }
		public FloatingPointContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPoint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToParenPlusOrMinusContext : AtomContext {
		public ITerminalNode LP() { return GetToken(PseudoParser.LP, 0); }
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode RP() { return GetToken(PseudoParser.RP, 0); }
		public ToParenPlusOrMinusContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToParenPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetVariableContext : AtomContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public GetVariableContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 101; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; Match(FLOAT);
				}
				break;
			case ID:
				_localctx = new GetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 103; Match(ID);
				}
				break;
			case LP:
				_localctx = new ToParenPlusOrMinusContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 104; Match(LP);
				State = 105; plusOrMinus(0);
				State = 106; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return plusOrMinus_sempred((PlusOrMinusContext)_localctx, predIndex);
		case 7: return multOrDiv_sempred((MultOrDivContext)_localctx, predIndex);
		}
		return true;
	}
	private bool plusOrMinus_sempred(PlusOrMinusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multOrDiv_sempred(MultOrDivContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', 'q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '$', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\'', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '.', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x31', '\v', '\x3', '\x5', '\x3', '\x33', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x39', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x43', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', 'N', '\n', '\b', '\f', '\b', '\xE', '\b', 'Q', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\\', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '_', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x66', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', 'o', '\n', '\v', '\x3', '\v', '\x2', '\x4', 
		'\xE', '\x10', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x2', '\x3', '\x3', '\x2', '\b', '\n', '\x2', 'v', '\x2', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x34', '\x3', '\x2', '\x2', '\x2', '\b', ':', '\x3', '\x2', 
		'\x2', '\x2', '\n', '>', '\x3', '\x2', '\x2', '\x2', '\f', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x44', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x12', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'n', '\x3', '\x2', '\x2', '\x2', '\x16', '\x1B', '\x5', 
		'\x4', '\x3', '\x2', '\x17', '\x18', '\a', ' ', '\x2', '\x2', '\x18', 
		'\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x33', '\x5', '\x6', '\x4', '\x2', '\x1F', ' ', '\a', 
		'\r', '\x2', '\x2', ' ', '%', '\a', '\x1F', '\x2', '\x2', '!', '\"', '\a', 
		'\x3', '\x2', '\x2', '\"', '$', '\a', '\x1F', '\x2', '\x2', '#', '!', 
		'\x3', '\x2', '\x2', '\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', 
		'&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '(', '\x33', '\a', ' ', '\x2', '\x2', ')', '*', '\a', '\xE', '\x2', 
		'\x2', '*', '/', '\x5', '\f', '\a', '\x2', '+', ',', '\a', '\x3', '\x2', 
		'\x2', ',', '.', '\x5', '\f', '\a', '\x2', '-', '+', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x32', ')', '\x3', '\x2', '\x2', '\x2', '\x33', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\n', '\x6', '\x2', '\x35', 
		'\x38', '\a', '\x1F', '\x2', '\x2', '\x36', '\x37', '\a', '\x1A', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\f', '\a', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\a', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x1F', '\x2', '\x2', 
		';', '<', '\a', '\x1A', '\x2', '\x2', '<', '=', '\x5', '\f', '\a', '\x2', 
		'=', '\t', '\x3', '\x2', '\x2', '\x2', '>', '?', '\t', '\x2', '\x2', '\x2', 
		'?', '\v', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x5', '\xE', '\b', 
		'\x2', '\x41', '\x43', '\a', '\x1E', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\b', '\b', '\x1', '\x2', 
		'\x45', '\x46', '\x5', '\x10', '\t', '\x2', '\x46', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\f', '\x5', '\x2', '\x2', 'H', 'I', '\a', '\x4', 
		'\x2', '\x2', 'I', 'N', '\x5', '\x10', '\t', '\x2', 'J', 'K', '\f', '\x4', 
		'\x2', '\x2', 'K', 'L', '\a', '\x5', '\x2', '\x2', 'L', 'N', '\x5', '\x10', 
		'\t', '\x2', 'M', 'G', '\x3', '\x2', '\x2', '\x2', 'M', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\b', 
		'\t', '\x1', '\x2', 'S', 'T', '\x5', '\x12', '\n', '\x2', 'T', ']', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\f', '\x5', '\x2', '\x2', 'V', 'W', '\a', 
		'\x6', '\x2', '\x2', 'W', '\\', '\x5', '\x12', '\n', '\x2', 'X', 'Y', 
		'\f', '\x4', '\x2', '\x2', 'Y', 'Z', '\a', '\a', '\x2', '\x2', 'Z', '\\', 
		'\x5', '\x12', '\n', '\x2', '[', 'U', '\x3', '\x2', '\x2', '\x2', '[', 
		'X', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', 
		']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x11', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\a', '\x4', '\x2', '\x2', '\x61', '\x66', '\x5', 
		'\x12', '\n', '\x2', '\x62', '\x63', '\a', '\x5', '\x2', '\x2', '\x63', 
		'\x66', '\x5', '\x12', '\n', '\x2', '\x64', '\x66', '\x5', '\x14', '\v', 
		'\x2', '\x65', '`', '\x3', '\x2', '\x2', '\x2', '\x65', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 'g', 'o', '\a', '\x1C', '\x2', '\x2', 
		'h', 'o', '\a', '\x1D', '\x2', '\x2', 'i', 'o', '\a', '\x1F', '\x2', '\x2', 
		'j', 'k', '\a', '\x18', '\x2', '\x2', 'k', 'l', '\x5', '\xE', '\b', '\x2', 
		'l', 'm', '\a', '\x19', '\x2', '\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 
		'n', 'g', '\x3', '\x2', '\x2', '\x2', 'n', 'h', '\x3', '\x2', '\x2', '\x2', 
		'n', 'i', '\x3', '\x2', '\x2', '\x2', 'n', 'j', '\x3', '\x2', '\x2', '\x2', 
		'o', '\x15', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1B', '%', '/', '\x32', 
		'\x38', '\x42', 'M', 'O', '[', ']', '\x65', 'n',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGenerated
