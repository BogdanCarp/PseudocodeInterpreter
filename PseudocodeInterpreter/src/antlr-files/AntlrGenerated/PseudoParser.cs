//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Sergiu/RiderProjects/PseudocodeInterpreter/PseudocodeInterpreter/src/antlr-files\Pseudo.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class PseudoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, INT_TYPE=2, FLOAT_TYPE=3, STRING_TYPE=4, CHAR_TYPE=5, BOOL_TYPE=6, 
		READ_BUILTIN=7, WRITE_BUILTIN=8, IF=9, THEN=10, ELSE=11, WHILE=12, EXEC=13, 
		REPEAT=14, UNTIL=15, END=16, FUNCTION=17, LP=18, RP=19, ASSIGN=20, EQUAL=21, 
		INT=22, FLOAT=23, STRING=24, ID=25, NL=26, LINE_COMMENT=27, COMMENT=28, 
		WS=29;
	public const int
		RULE_file = 0, RULE_stat = 1, RULE_varDecl = 2, RULE_type = 3, RULE_expr = 4;
	public static readonly string[] ruleNames = {
		"file", "stat", "varDecl", "type", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'intreg'", "'real'", "'sir'", "'caracter'", "'boolean'", 
		"'citeste'", "'scrie'", "'daca'", "'atunci'", "'altfel'", "'cat timp'", 
		"'executa'", "'repeta'", "'pana cand'", "'sfarsit'", "'fun'", "'('", "')'", 
		"'<-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", "CHAR_TYPE", "BOOL_TYPE", 
		"READ_BUILTIN", "WRITE_BUILTIN", "IF", "THEN", "ELSE", "WHILE", "EXEC", 
		"REPEAT", "UNTIL", "END", "FUNCTION", "LP", "RP", "ASSIGN", "EQUAL", "INT", 
		"FLOAT", "STRING", "ID", "NL", "LINE_COMMENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pseudo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PseudoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10; stat();
					State = 11; Match(NL);
					}
					} 
				}
				State = 17;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 18; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WriteBuiltinStatContext : StatContext {
		public ITerminalNode WRITE_BUILTIN() { return GetToken(PseudoParser.WRITE_BUILTIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteBuiltinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteBuiltinStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToVarDeclContext : StatContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ToVarDeclContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadBuiltinStatContext : StatContext {
		public ITerminalNode READ_BUILTIN() { return GetToken(PseudoParser.READ_BUILTIN, 0); }
		public ITerminalNode[] ID() { return GetTokens(PseudoParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PseudoParser.ID, i);
		}
		public ITerminalNode NL() { return GetToken(PseudoParser.NL, 0); }
		public ReadBuiltinStatContext(StatContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadBuiltinStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		int _la;
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
			case FLOAT_TYPE:
				_localctx = new ToVarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; varDecl();
				}
				break;
			case READ_BUILTIN:
				_localctx = new ReadBuiltinStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; Match(READ_BUILTIN);
				State = 22; Match(ID);
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 23; Match(T__0);
					State = 24; Match(ID);
					}
					}
					State = 29;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 30; Match(NL);
				}
				break;
			case WRITE_BUILTIN:
				_localctx = new WriteBuiltinStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 31; Match(WRITE_BUILTIN);
				State = 32; expr();
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 33; Match(T__0);
					State = 34; expr();
					}
					}
					State = 39;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(VarDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; type();
			State = 43; Match(ID);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 44; Match(ASSIGN);
				State = 45; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(PseudoParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(PseudoParser.FLOAT_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_la = TokenStream.LA(1);
			if ( !(_la==INT_TYPE || _la==FLOAT_TYPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : ExprContext {
		public ITerminalNode INT() { return GetToken(PseudoParser.INT, 0); }
		public IntegerContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatingPointContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(PseudoParser.FLOAT, 0); }
		public FloatingPointContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\x39', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x10', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x1C', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x1F', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '&', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', ')', '\v', '\x3', '\x5', '\x3', '+', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x31', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x37', '\n', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', 
		'\x6', '\b', '\n', '\x2', '\x3', '\x3', '\x2', '\x4', '\x5', '\x2', ':', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', '\x2', '\x2', 
		'\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5', 
		'\x4', '\x3', '\x2', '\r', '\xE', '\a', '\x1C', '\x2', '\x2', '\xE', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\f', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', '\x12', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x15', '\x5', '\x4', '\x3', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '+', '\x5', '\x6', '\x4', '\x2', '\x17', '\x18', '\a', 
		'\t', '\x2', '\x2', '\x18', '\x1D', '\a', '\x1B', '\x2', '\x2', '\x19', 
		'\x1A', '\a', '\x3', '\x2', '\x2', '\x1A', '\x1C', '\a', '\x1B', '\x2', 
		'\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '+', '\a', '\x1C', 
		'\x2', '\x2', '!', '\"', '\a', '\n', '\x2', '\x2', '\"', '\'', '\x5', 
		'\n', '\x6', '\x2', '#', '$', '\a', '\x3', '\x2', '\x2', '$', '&', '\x5', 
		'\n', '\x6', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', 
		'\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', 
		'\'', '\x3', '\x2', '\x2', '\x2', '*', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x17', '\x3', '\x2', '\x2', '\x2', '*', '!', '\x3', '\x2', '\x2', 
		'\x2', '+', '\x5', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '\b', 
		'\x5', '\x2', '-', '\x30', '\a', '\x1B', '\x2', '\x2', '.', '/', '\a', 
		'\x16', '\x2', '\x2', '/', '\x31', '\x5', '\n', '\x6', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\t', 
		'\x2', '\x2', '\x2', '\x33', '\t', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x37', '\a', '\x18', '\x2', '\x2', '\x35', '\x37', '\a', '\x19', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\v', '\x3', '\x2', '\x2', '\x2', '\b', '\x11', 
		'\x1D', '\'', '*', '\x30', '\x36',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGenerated
