//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pseudo.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class PseudoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		INT_TYPE=10, FLOAT_TYPE=11, STRING_TYPE=12, CHAR_TYPE=13, BOOL_TYPE=14, 
		READ_BUILTIN=15, WRITE_BUILTIN=16, IF=17, THEN=18, ELSE=19, WHILE=20, 
		EXEC=21, REPEAT=22, UNTIL=23, END=24, AND=25, OR=26, NOT=27, FUNCTION=28, 
		LP=29, RP=30, ASSIGN=31, EQUAL=32, INT=33, FLOAT=34, STRING=35, ID=36, 
		NL=37, LINE_COMMENT=38, COMMENT=39, WS=40;
	public const int
		RULE_file = 0, RULE_statList = 1, RULE_stat = 2, RULE_ifStat = 3, RULE_readBuiltin = 4, 
		RULE_writeBuiltin = 5, RULE_varDecl = 6, RULE_optionalAssign = 7, RULE_varAssign = 8, 
		RULE_type = 9, RULE_boolOp = 10, RULE_expr = 11, RULE_plusOrMinus = 12, 
		RULE_multOrDiv = 13, RULE_unarySign = 14, RULE_atom = 15;
	public static readonly string[] ruleNames = {
		"file", "statList", "stat", "ifStat", "readBuiltin", "writeBuiltin", "varDecl", 
		"optionalAssign", "varAssign", "type", "boolOp", "expr", "plusOrMinus", 
		"multOrDiv", "unarySign", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", 
		"'intreg'", "'real'", "'text'", "'caracter'", "'boolean'", "'citeste'", 
		"'scrie'", "'daca'", "'atunci'", "'altfel'", "'cat timp'", "'executa'", 
		"'repeta'", "'pana cand'", "'sfarsit'", "'si'", "'sau'", "'non'", "'fun'", 
		"'('", "')'", "'<-'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "INT_TYPE", 
		"FLOAT_TYPE", "STRING_TYPE", "CHAR_TYPE", "BOOL_TYPE", "READ_BUILTIN", 
		"WRITE_BUILTIN", "IF", "THEN", "ELSE", "WHILE", "EXEC", "REPEAT", "UNTIL", 
		"END", "AND", "OR", "NOT", "FUNCTION", "LP", "RP", "ASSIGN", "EQUAL", 
		"INT", "FLOAT", "STRING", "ID", "NL", "LINE_COMMENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pseudo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PseudoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; statList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatListContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatListContext statList() {
		StatListContext _localctx = new StatListContext(Context, State);
		EnterRule(_localctx, 2, RULE_statList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; stat();
			State = 39;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 35; Match(NL);
					State = 36; stat();
					}
					} 
				}
				State = 41;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public VarAssignContext varAssign() {
			return GetRuleContext<VarAssignContext>(0);
		}
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public ReadBuiltinContext readBuiltin() {
			return GetRuleContext<ReadBuiltinContext>(0);
		}
		public WriteBuiltinContext writeBuiltin() {
			return GetRuleContext<WriteBuiltinContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
			case FLOAT_TYPE:
			case STRING_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; varDecl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; varAssign();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44; ifStat();
				}
				break;
			case READ_BUILTIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45; readBuiltin();
				}
				break;
			case WRITE_BUILTIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46; writeBuiltin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(PseudoParser.IF, 0); }
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PseudoParser.THEN, 0); }
		public ITerminalNode[] NL() { return GetTokens(PseudoParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(PseudoParser.NL, i);
		}
		public StatListContext statList() {
			return GetRuleContext<StatListContext>(0);
		}
		public ITerminalNode END() { return GetToken(PseudoParser.END, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(IF);
			State = 50; boolOp(0);
			State = 51; Match(THEN);
			State = 52; Match(NL);
			State = 53; statList();
			State = 54; Match(NL);
			State = 55; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadBuiltinContext : ParserRuleContext {
		public ITerminalNode READ_BUILTIN() { return GetToken(PseudoParser.READ_BUILTIN, 0); }
		public ITerminalNode[] ID() { return GetTokens(PseudoParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(PseudoParser.ID, i);
		}
		public ReadBuiltinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readBuiltin; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadBuiltin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadBuiltinContext readBuiltin() {
		ReadBuiltinContext _localctx = new ReadBuiltinContext(Context, State);
		EnterRule(_localctx, 8, RULE_readBuiltin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(READ_BUILTIN);
			State = 58; Match(ID);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 59; Match(T__0);
				State = 60; Match(ID);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteBuiltinContext : ParserRuleContext {
		public ITerminalNode WRITE_BUILTIN() { return GetToken(PseudoParser.WRITE_BUILTIN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteBuiltinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeBuiltin; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteBuiltin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteBuiltinContext writeBuiltin() {
		WriteBuiltinContext _localctx = new WriteBuiltinContext(Context, State);
		EnterRule(_localctx, 10, RULE_writeBuiltin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(WRITE_BUILTIN);
			State = 67; expr();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 68; Match(T__0);
				State = 69; expr();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OptionalAssignContext[] optionalAssign() {
			return GetRuleContexts<OptionalAssignContext>();
		}
		public OptionalAssignContext optionalAssign(int i) {
			return GetRuleContext<OptionalAssignContext>(i);
		}
		public VariableDeclarationContext(VarDeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_varDecl);
		int _la;
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; type();
			State = 76; optionalAssign();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 77; Match(T__0);
				State = 78; optionalAssign();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalAssignContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OptionalAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalAssignContext optionalAssign() {
		OptionalAssignContext _localctx = new OptionalAssignContext(Context, State);
		EnterRule(_localctx, 14, RULE_optionalAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(ID);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 85; Match(ASSIGN);
				State = 86; expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarAssignContext : ParserRuleContext {
		public VarAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varAssign; } }
	 
		public VarAssignContext() { }
		public virtual void CopyFrom(VarAssignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : VarAssignContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(PseudoParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignmentContext(VarAssignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarAssignContext varAssign() {
		VarAssignContext _localctx = new VarAssignContext(Context, State);
		EnterRule(_localctx, 16, RULE_varAssign);
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(ID);
			State = 90; Match(ASSIGN);
			State = 91; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT_TYPE() { return GetToken(PseudoParser.INT_TYPE, 0); }
		public ITerminalNode FLOAT_TYPE() { return GetToken(PseudoParser.FLOAT_TYPE, 0); }
		public ITerminalNode STRING_TYPE() { return GetToken(PseudoParser.STRING_TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_TYPE) | (1L << FLOAT_TYPE) | (1L << STRING_TYPE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
	 
		public BoolOpContext() { }
		public virtual void CopyFrom(BoolOpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessOrEqualContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public LessOrEqualContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrOpContext : BoolOpContext {
		public BoolOpContext[] boolOp() {
			return GetRuleContexts<BoolOpContext>();
		}
		public BoolOpContext boolOp(int i) {
			return GetRuleContext<BoolOpContext>(i);
		}
		public ITerminalNode OR() { return GetToken(PseudoParser.OR, 0); }
		public ITerminalNode NOT() { return GetToken(PseudoParser.NOT, 0); }
		public OrOpContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public LessThanContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public GreaterThanContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterOrEqualContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public GreaterOrEqualContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AreEqualContext : BoolOpContext {
		public PlusOrMinusContext[] plusOrMinus() {
			return GetRuleContexts<PlusOrMinusContext>();
		}
		public PlusOrMinusContext plusOrMinus(int i) {
			return GetRuleContext<PlusOrMinusContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(PseudoParser.EQUAL, 0); }
		public AreEqualContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAreEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOpContext : BoolOpContext {
		public BoolOpContext[] boolOp() {
			return GetRuleContexts<BoolOpContext>();
		}
		public BoolOpContext boolOp(int i) {
			return GetRuleContext<BoolOpContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PseudoParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(PseudoParser.NOT, 0); }
		public AndOpContext(BoolOpContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		return boolOp(0);
	}

	private BoolOpContext boolOp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolOpContext _localctx = new BoolOpContext(Context, _parentState);
		BoolOpContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_boolOp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new AreEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 96; plusOrMinus(0);
				State = 97; Match(EQUAL);
				State = 98; plusOrMinus(0);
				}
				break;
			case 2:
				{
				_localctx = new LessThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; plusOrMinus(0);
				State = 101; Match(T__1);
				State = 102; plusOrMinus(0);
				}
				break;
			case 3:
				{
				_localctx = new LessOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; plusOrMinus(0);
				State = 105; Match(T__2);
				State = 106; plusOrMinus(0);
				}
				break;
			case 4:
				{
				_localctx = new GreaterThanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; plusOrMinus(0);
				State = 109; Match(T__3);
				State = 110; plusOrMinus(0);
				}
				break;
			case 5:
				{
				_localctx = new GreaterOrEqualContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112; plusOrMinus(0);
				State = 113; Match(T__4);
				State = 114; plusOrMinus(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 130;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new AndOpContext(new BoolOpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolOp);
						State = 118;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 120;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 119; Match(NOT);
							}
						}

						State = 122; Match(AND);
						State = 123; boolOp(8);
						}
						break;
					case 2:
						{
						_localctx = new OrOpContext(new BoolOpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolOp);
						State = 124;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 126;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 125; Match(NOT);
							}
						}

						State = 128; Match(OR);
						State = 129; boolOp(7);
						}
						break;
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToPlusOrMinusContext : ExprContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ToPlusOrMinusContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(PseudoParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_expr);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__6:
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToPlusOrMinusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; plusOrMinus(0);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOrMinusContext : ParserRuleContext {
		public PlusOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOrMinus; } }
	 
		public PlusOrMinusContext() { }
		public virtual void CopyFrom(PlusOrMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public AddContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToMultOrDivContext : PlusOrMinusContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ToMultOrDivContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToMultOrDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public SubContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOrMinusContext plusOrMinus() {
		return plusOrMinus(0);
	}

	private PlusOrMinusContext plusOrMinus(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlusOrMinusContext _localctx = new PlusOrMinusContext(Context, _parentState);
		PlusOrMinusContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_plusOrMinus, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToMultOrDivContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 140; multOrDiv(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 148;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new AddContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 142;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 143; Match(T__5);
						State = 144; multOrDiv(0);
						}
						break;
					case 2:
						{
						_localctx = new SubContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 145;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 146; Match(T__6);
						State = 147; multOrDiv(0);
						}
						break;
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOrDivContext : ParserRuleContext {
		public MultOrDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOrDiv; } }
	 
		public MultOrDivContext() { }
		public virtual void CopyFrom(MultOrDivContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public DivContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToUnarySignContext : MultOrDivContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public ToUnarySignContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToUnarySign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public MultContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOrDivContext multOrDiv() {
		return multOrDiv(0);
	}

	private MultOrDivContext multOrDiv(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultOrDivContext _localctx = new MultOrDivContext(Context, _parentState);
		MultOrDivContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_multOrDiv, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToUnarySignContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 154; unarySign();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 164;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 162;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new MultContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 156;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 157; Match(T__7);
						State = 158; unarySign();
						}
						break;
					case 2:
						{
						_localctx = new DivContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 159;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 160; Match(T__8);
						State = 161; unarySign();
						}
						break;
					}
					} 
				}
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnarySignContext : ParserRuleContext {
		public UnarySignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unarySign; } }
	 
		public UnarySignContext() { }
		public virtual void CopyFrom(UnarySignContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryPlusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryPlusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : UnarySignContext {
		public UnarySignContext unarySign() {
			return GetRuleContext<UnarySignContext>(0);
		}
		public UnaryMinusContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToAtomContext : UnarySignContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(UnarySignContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnarySignContext unarySign() {
		UnarySignContext _localctx = new UnarySignContext(Context, State);
		EnterRule(_localctx, 28, RULE_unarySign);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				_localctx = new UnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; Match(T__5);
				State = 168; unarySign();
				}
				break;
			case T__6:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; Match(T__6);
				State = 170; unarySign();
				}
				break;
			case LP:
			case INT:
			case FLOAT:
			case ID:
				_localctx = new ToAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 171; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerContext : AtomContext {
		public ITerminalNode INT() { return GetToken(PseudoParser.INT, 0); }
		public IntegerContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatingPointContext : AtomContext {
		public ITerminalNode FLOAT() { return GetToken(PseudoParser.FLOAT, 0); }
		public FloatingPointContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPoint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToParenPlusOrMinusContext : AtomContext {
		public ITerminalNode LP() { return GetToken(PseudoParser.LP, 0); }
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode RP() { return GetToken(PseudoParser.RP, 0); }
		public ToParenPlusOrMinusContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToParenPlusOrMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetVariableContext : AtomContext {
		public ITerminalNode ID() { return GetToken(PseudoParser.ID, 0); }
		public GetVariableContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoVisitor<TResult> typedVisitor = visitor as IPseudoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 30, RULE_atom);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new FloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; Match(FLOAT);
				}
				break;
			case ID:
				_localctx = new GetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 176; Match(ID);
				}
				break;
			case LP:
				_localctx = new ToParenPlusOrMinusContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 177; Match(LP);
				State = 178; plusOrMinus(0);
				State = 179; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return boolOp_sempred((BoolOpContext)_localctx, predIndex);
		case 12: return plusOrMinus_sempred((PlusOrMinusContext)_localctx, predIndex);
		case 13: return multOrDiv_sempred((MultOrDivContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolOp_sempred(BoolOpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool plusOrMinus_sempred(PlusOrMinusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multOrDiv_sempred(MultOrDivContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xBA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '(', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '+', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '@', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\x43', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', 'I', '\n', '\a', '\f', '\a', '\xE', '\a', 'L', '\v', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'R', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 'U', '\v', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'Z', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'w', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '{', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x81', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x85', '\n', '\f', '\f', '\f', '\xE', '\f', '\x88', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8C', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x97', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x9A', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xA5', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xA8', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xAF', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xB8', '\n', 
		'\x11', '\x3', '\x11', '\x2', '\x5', '\x16', '\x1A', '\x1C', '\x12', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x3', '\x3', '\x2', '\f', 
		'\xE', '\x2', '\xC4', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x33', '\x3', '\x2', '\x2', '\x2', '\n', ';', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x44', '\x3', '\x2', '\x2', '\x2', '\xE', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'V', '\x3', '\x2', '\x2', '\x2', '\x12', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '_', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xAE', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x5', '\x4', '\x3', '\x2', 
		'#', '\x3', '\x3', '\x2', '\x2', '\x2', '$', ')', '\x5', '\x6', '\x4', 
		'\x2', '%', '&', '\a', '\'', '\x2', '\x2', '&', '(', '\x5', '\x6', '\x4', 
		'\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', ')', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x32', '\x5', '\xE', '\b', '\x2', '-', 
		'\x32', '\x5', '\x12', '\n', '\x2', '.', '\x32', '\x5', '\b', '\x5', '\x2', 
		'/', '\x32', '\x5', '\n', '\x6', '\x2', '\x30', '\x32', '\x5', '\f', '\a', 
		'\x2', '\x31', ',', '\x3', '\x2', '\x2', '\x2', '\x31', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '.', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\x13', '\x2', 
		'\x2', '\x34', '\x35', '\x5', '\x16', '\f', '\x2', '\x35', '\x36', '\a', 
		'\x14', '\x2', '\x2', '\x36', '\x37', '\a', '\'', '\x2', '\x2', '\x37', 
		'\x38', '\x5', '\x4', '\x3', '\x2', '\x38', '\x39', '\a', '\'', '\x2', 
		'\x2', '\x39', ':', '\a', '\x1A', '\x2', '\x2', ':', '\t', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '\x11', '\x2', '\x2', '<', '\x41', '\a', 
		'&', '\x2', '\x2', '=', '>', '\a', '\x3', '\x2', '\x2', '>', '@', '\a', 
		'&', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', 
		'\x12', '\x2', '\x2', '\x45', 'J', '\x5', '\x18', '\r', '\x2', '\x46', 
		'G', '\a', '\x3', '\x2', '\x2', 'G', 'I', '\x5', '\x18', '\r', '\x2', 
		'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', '\r', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\x5', '\x14', '\v', '\x2', 'N', 'S', '\x5', '\x10', 
		'\t', '\x2', 'O', 'P', '\a', '\x3', '\x2', '\x2', 'P', 'R', '\x5', '\x10', 
		'\t', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\xF', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'Y', '\a', '&', '\x2', '\x2', 'W', 'X', '\a', 
		'!', '\x2', '\x2', 'X', 'Z', '\x5', '\x18', '\r', '\x2', 'Y', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '&', '\x2', '\x2', '\\', 
		']', '\a', '!', '\x2', '\x2', ']', '^', '\x5', '\x18', '\r', '\x2', '^', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '_', '`', '\t', '\x2', '\x2', '\x2', 
		'`', '\x15', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\b', '\f', '\x1', 
		'\x2', '\x62', '\x63', '\x5', '\x1A', '\xE', '\x2', '\x63', '\x64', '\a', 
		'\"', '\x2', '\x2', '\x64', '\x65', '\x5', '\x1A', '\xE', '\x2', '\x65', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\x1A', '\xE', '\x2', 
		'g', 'h', '\a', '\x4', '\x2', '\x2', 'h', 'i', '\x5', '\x1A', '\xE', '\x2', 
		'i', 'w', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '\x1A', '\xE', 
		'\x2', 'k', 'l', '\a', '\x5', '\x2', '\x2', 'l', 'm', '\x5', '\x1A', '\xE', 
		'\x2', 'm', 'w', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x1A', 
		'\xE', '\x2', 'o', 'p', '\a', '\x6', '\x2', '\x2', 'p', 'q', '\x5', '\x1A', 
		'\xE', '\x2', 'q', 'w', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\x1A', 
		'\xE', '\x2', 's', 't', '\a', '\a', '\x2', '\x2', 't', 'u', '\x5', '\x1A', 
		'\xE', '\x2', 'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', '\x61', '\x3', 
		'\x2', '\x2', '\x2', 'v', '\x66', '\x3', '\x2', '\x2', '\x2', 'v', 'j', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'n', '\x3', '\x2', '\x2', '\x2', 'v', 
		'r', '\x3', '\x2', '\x2', '\x2', 'w', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'x', 'z', '\f', '\t', '\x2', '\x2', 'y', '{', '\a', '\x1D', '\x2', '\x2', 
		'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x1B', '\x2', '\x2', 
		'}', '\x85', '\x5', '\x16', '\f', '\n', '~', '\x80', '\f', '\b', '\x2', 
		'\x2', '\x7F', '\x81', '\a', '\x1D', '\x2', '\x2', '\x80', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '\x1C', '\x2', 
		'\x2', '\x83', '\x85', '\x5', '\x16', '\f', '\t', '\x84', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '~', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8C', '\x5', '\x1A', '\xE', '\x2', '\x8A', '\x8C', '\a', '%', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\b', '\xE', '\x1', '\x2', '\x8E', '\x8F', '\x5', '\x1C', '\xF', 
		'\x2', '\x8F', '\x98', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\f', 
		'\x5', '\x2', '\x2', '\x91', '\x92', '\a', '\b', '\x2', '\x2', '\x92', 
		'\x97', '\x5', '\x1C', '\xF', '\x2', '\x93', '\x94', '\f', '\x4', '\x2', 
		'\x2', '\x94', '\x95', '\a', '\t', '\x2', '\x2', '\x95', '\x97', '\x5', 
		'\x1C', '\xF', '\x2', '\x96', '\x90', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\b', '\xF', '\x1', 
		'\x2', '\x9C', '\x9D', '\x5', '\x1E', '\x10', '\x2', '\x9D', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\f', '\x5', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '\n', '\x2', '\x2', '\xA0', '\xA5', '\x5', '\x1E', '\x10', 
		'\x2', '\xA1', '\xA2', '\f', '\x4', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'\v', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\x1E', '\x10', '\x2', '\xA4', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\b', '\x2', '\x2', '\xAA', '\xAF', '\x5', 
		'\x1E', '\x10', '\x2', '\xAB', '\xAC', '\a', '\t', '\x2', '\x2', '\xAC', 
		'\xAF', '\x5', '\x1E', '\x10', '\x2', '\xAD', '\xAF', '\x5', ' ', '\x11', 
		'\x2', '\xAE', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB8', '\a', '#', '\x2', 
		'\x2', '\xB1', '\xB8', '\a', '$', '\x2', '\x2', '\xB2', '\xB8', '\a', 
		'&', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x1F', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB5', '\xB6', '\a', ' ', '\x2', 
		'\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '!', '\x3', '\x2', '\x2', '\x2', '\x14', ')', '\x31', '\x41', 
		'J', 'S', 'Y', 'v', 'z', '\x80', '\x84', '\x86', '\x8B', '\x96', '\x98', 
		'\xA4', '\xA6', '\xAE', '\xB7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrGenerated
